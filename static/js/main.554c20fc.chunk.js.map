{"version":3,"sources":["fib.js","App.js","serviceWorker.js","index.js"],"names":["fib","n","arr","i","push","Spoke","_ref","style","fibValue","sequence","console","log","slice","length","map","last","react_default","a","createElement","x","concat","y","width","height","fill","stroke","App","_useState","useState","_useState2","Object","slicedToArray","numSpokes","setNumSpokes","_useState3","_useState4","setFibValue","id","Array","from","_","App_Spoke","transform","htmlFor","type","value","min","max","onChange","event","Number","target","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NAQeA,EARH,SAAAC,GAEV,IADA,IAAIC,EAAM,CAAC,EAAG,GACLC,EAAI,EAAGA,EAAIF,EAAI,EAAGE,IACzBD,EAAIE,KAAKF,EAAIC,EAAI,GAAKD,EAAIC,EAAI,IAEhC,OAAOD,GCiDHG,SAAQ,SAAAC,GAAyB,IAAtBC,EAAsBD,EAAtBC,MAAOC,EAAeF,EAAfE,SAChBC,EAAWT,EAAIQ,GAErB,OADAE,QAAQC,IAAI,CAAEF,aACPA,EAASG,MAAM,EAAGH,EAASI,OAAS,GAAGC,IAAI,SAACb,EAAGE,GACpD,IAAMY,EAAON,EAASA,EAASI,OAAS,GACxC,OACEG,EAAAC,EAAAC,cAAA,KAAGX,MAAOA,GACRS,EAAAC,EAAAC,cAAA,QACEC,EAAC,kBAAAC,OAAoBL,EAApB,QAAAK,OAA+BX,EAASN,EAAI,GAA5C,KACDkB,EAAC,kBAAAD,OAAoBL,EAApB,QAAAK,OAA+BX,EAASN,EAAI,GAA5C,KACDmB,MAAK,kBAAAF,OAAoBL,EAApB,QAAAK,OAA+BnB,EAA/B,KACLsB,OAAM,kBAAAH,OAAoBL,EAApB,QAAAK,OAA+BnB,EAA/B,KACNM,MAAO,CACLiB,KAAI,QAAAJ,OAAUnB,EAAV,sBACJwB,OAAM,QAAAL,OAAUnB,EAAV,2BAOHyB,EAvEH,WAAM,IAAAC,EACkBC,mBAAS,IAD3BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACTK,EADSH,EAAA,GACEI,EADFJ,EAAA,GAAAK,EAEgBN,mBAAS,IAFzBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAET1B,EAFS2B,EAAA,GAECC,EAFDD,EAAA,GAMhB,OACEnB,EAAAC,EAAAC,cAAA,OAAKmB,GAAG,OACNrB,EAAAC,EAAAC,cAAA,OAAKI,MAAO,UAAWC,OAAQ,WAC5Be,MAAMC,KAAK,CAAE1B,OAAQmB,IAAalB,IAAI,SAAC0B,EAAGrC,GAAJ,OACrCa,EAAAC,EAAAC,cAACuB,EAAD,CACEjC,SAAUA,EACVD,MAAO,CACLmC,UAAS,oCAAAtB,OAAuC,IAAMY,GACnD7B,EAAI,GADE,cAMjBa,EAAAC,EAAAC,cAAA,OAAKmB,GAAG,YACNrB,EAAAC,EAAAC,cAAA,SAAOyB,QAAQ,cAAf,YACA3B,EAAAC,EAAAC,cAAA,SACEmB,GAAG,aACHO,KAAK,SACLC,MAAOb,EACPc,IAAK,EACLC,IAAK,GACLC,SAvBgB,SAAAC,GAAK,OAAIhB,EAAaiB,OAAOD,EAAME,OAAON,WAyB5D7B,EAAAC,EAAAC,cAAA,SAAOyB,QAAQ,cAAf,gBACA3B,EAAAC,EAAAC,cAAA,SACEmB,GAAG,aACHO,KAAK,SACLC,MAAOrC,EACPsC,IAAK,EACLC,IAAK,GACLC,SA/Be,SAAAC,GAAK,OAAIb,EAAYc,OAAOD,EAAME,OAAON,YAkC5D7B,EAAAC,EAAAC,cAAA,KACEkC,KAAK,8DACLD,OAAO,SACPE,IAAI,YAHN,iBC/BcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.554c20fc.chunk.js","sourcesContent":["const fib = n => {\n  let arr = [2, 3];\n  for (let i = 2; i < n + 1; i++) {\n    arr.push(arr[i - 2] + arr[i - 1]);\n  }\n  return arr;\n};\n\nexport default fib;\n","import React, { useState } from \"react\";\nimport fib from \"./fib\";\nimport \"./App.scss\";\n\nconst App = () => {\n  const [numSpokes, setNumSpokes] = useState(15);\n  const [fibValue, setFibValue] = useState(15);\n\n  const changeNumSpokes = event => setNumSpokes(Number(event.target.value));\n  const changeFibValue = event => setFibValue(Number(event.target.value));\n  return (\n    <div id=\"App\">\n      <svg width={\"100vmin\"} height={\"100vmin\"}>\n        {Array.from({ length: numSpokes }).map((_, i) => (\n          <Spoke\n            fibValue={fibValue}\n            style={{\n              transform: `translate(50vmin, 50vmin) rotate(${(360 / numSpokes) *\n                (i + 1)}deg)`\n            }}\n          />\n        ))}\n      </svg>\n      <div id=\"controls\">\n        <label htmlFor=\"num-spokes\">Spokes: </label>\n        <input\n          id=\"num-spokes\"\n          type=\"number\"\n          value={numSpokes}\n          min={1}\n          max={42}\n          onChange={changeNumSpokes}\n        />\n        <label htmlFor=\"fib-number\">Iterations: </label>\n        <input\n          id=\"fib-number\"\n          type=\"number\"\n          value={fibValue}\n          min={2}\n          max={36}\n          onChange={changeFibValue}\n        />\n      </div>\n      <a\n        href=\"https://github.com/doppler/fibonacci/blob/master/src/App.js\"\n        target=\"_blank\"\n        rel=\"noopener\"\n      >\n        View Source\n      </a>\n    </div>\n  );\n};\n\nconst Spoke = ({ style, fibValue }) => {\n  const sequence = fib(fibValue);\n  console.log({ sequence });\n  return sequence.slice(0, sequence.length - 2).map((n, i) => {\n    const last = sequence[sequence.length - 1];\n    return (\n      <g style={style}>\n        <rect\n          x={`calc((50vmin / ${last}) * ${sequence[i - 1]})`}\n          y={`calc((50vmin / ${last}) * ${sequence[i - 1]})`}\n          width={`calc((50vmin / ${last}) * ${n})`}\n          height={`calc((50vmin / ${last}) * ${n})`}\n          style={{\n            fill: `hsla(${n}, 100%, 50%, 0.05)`,\n            stroke: `hsla(${n}, 100%, 50%, 1)`\n          }}\n        />\n      </g>\n    );\n  });\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nif (module.hot) module.hot.accept();\n"],"sourceRoot":""}